/* Generated By:JavaCC: Do not edit this line. EquationParser.java */
package org.da.expressionj.expr.parser;
import java.io.StringReader;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import org.da.expressionj.expr.*;
import org.da.expressionj.model.*;
import org.da.expressionj.functions.ConstantsDefinitions;

/**
 * This class performs logical expression parsing and evaluation.
 * It is build with JavaCC.
 *
 * @version 0.9.2
 */
public class EquationParser implements EquationParserConstants {
    private static EquationParser parser;
    private static final short TYPE_NONE = 0;
    private static final short TYPE_CHOICE = 1;
    private static final short TYPE_WHILE = 2;
    private static Stack<Expression> argStack = new Stack();
    private static Stack<Stack<Expression>> paramStack = new Stack();
    private static Stack<Stack<Expression>> functionsStack = new Stack();
    private static Stack<CodeBlock> blocks = new Stack();
    private static Stack<ExprCHOICE> choices = new Stack();
    private static Stack<ExprWHILE> whiles = new Stack();
    private static Stack<Short> curly = new Stack();
    private static ParsedEquation equation = null;
    private static ExprFunction exprFunction = null;
    private static ConstantsDefinitions constants = ConstantsDefinitions.getInstance();
    private static boolean acceptUndefVars = true;
    private static boolean inPar = false;
    private static String affectType = null;
    private static ExprAffectation affect = null;
    private static Variable affectVariable = null;
    private static boolean checkSemiColon = false;

    public static void main(String[] args) throws ParseException {
    }

    public static void acceptUndefinedVariables(boolean accept) {
        acceptUndefVars = accept;
    }

    public static boolean isAcceptingUndefinedVariables() {
        return acceptUndefVars;
    }

    public static Equation parse(String text, List<Variable> vars) throws ParseException {
        try {
            functionsStack = new Stack();
            argStack = new Stack();
            paramStack = new Stack();
            blocks = new Stack();
            choices = new Stack();
            whiles = new Stack();
            curly = new Stack();
            affectType = null;
            affectVariable = null;
            affect = null;
            checkSemiColon = false;
            equation = new ParsedEquation();
            equation.acceptUndefinedVariables(acceptUndefVars);
            equation.setVariables(vars);
            if (parser == null) {
                  parser = new EquationParser(new StringReader(text));
            } else {
                  parser.ReInit(new StringReader(text));
            }
            parser.parse();
            if (blocks.isEmpty()) {
               equation.setExpression(argStack.pop());
            } else {
               if (! argStack.isEmpty()) {
                 Expression arg = argStack.pop();
                 if (arg!= null) {
                    blocks.peek().addExpression(arg);
                 }
               }
               equation.setExpression(blocks.peek());
            }
        } catch (ParseException e) {
            throw e;
        } catch (Exception e) {
            ParseException pe = new ParseException(e.getMessage());
            pe.setStackTrace(e.getStackTrace());
            throw pe;
        }

        return equation;
    }

    public static Equation parse(String text) throws ParseException {
        try {
            equation = new ParsedEquation();
            functionsStack = new Stack();
            paramStack = new Stack();
            argStack = new Stack();
            blocks = new Stack();
            choices = new Stack();
            whiles = new Stack();
            curly = new Stack();
            affectType = null;
            affectVariable = null;
            affect = null;
            checkSemiColon = false;
            equation.acceptUndefinedVariables(acceptUndefVars);
            if (parser == null) {
               parser = new EquationParser(new StringReader(text));
            } else {
               parser.ReInit(new StringReader(text));
            }
            parser.parse();
            if (blocks.isEmpty()) {
               equation.setExpression(argStack.pop());
            } else {
               if (! argStack.isEmpty()) {
                 Expression arg = argStack.pop();
                 if (arg!= null) {
                    blocks.peek().addExpression(arg);
                 }
               }
               equation.setExpression(blocks.peek());
            }
        } catch (ParseException e) {
            throw e;
        } catch (Exception e) {
            ParseException pe = new ParseException(e.getMessage());
            pe.setStackTrace(e.getStackTrace());
            throw pe;
        }

         return equation;
    }

   private static void push(Expression expr) {
     checkSemiColon();
     argStack.push(expr);
   }

   private static void checkSemiColon() {
      if (checkSemiColon && (! argStack.empty())) {
        Expression expr = argStack.pop();
        if (blocks.isEmpty()) {
          CodeBlock block = new CodeBlock();
          blocks.push(block);
        }
        CodeBlock block = blocks.peek();
        if (block.lastExpression() != expr) {
           blocks.peek().addExpression(expr);
        }
      }
      checkSemiColon = false;
   }

   private static Variable getVariable(String varName) {
     if (blocks.isEmpty()) {
        return equation.getVariable(varName);
     } else {
        Variable var = blocks.peek().getInternalVariable(varName);
        if (var == null) {
           return equation.getVariable(varName);
        } else {
           return var;
        }
     }
   }

   private static void setVariableType(Variable var, String typeS) {
      if (typeS.equals("int")) {
         var.setType(Expression.TYPE_INTEGER);
         var.setStructure(Expression.STRUCT_SCALAR);
      } else if (typeS.equals("float")) {
         var.setType(Expression.TYPE_FLOAT);
         var.setStructure(Expression.STRUCT_SCALAR);
      } else if (typeS.equals("bool")) {
         var.setType(Expression.TYPE_BOOL);
         var.setStructure(Expression.STRUCT_SCALAR);
      } else if (typeS.equals("string")) {
         var.setType(Expression.TYPE_STRING);
         var.setStructure(Expression.STRUCT_SCALAR);
      } else if (typeS.equals("int[]")) {
         var.setType(Expression.TYPE_INTEGER);
         var.setStructure(Expression.STRUCT_ARRAY);
      } else if (typeS.equals("float[]")) {
         var.setType(Expression.TYPE_FLOAT);
         var.setStructure(Expression.STRUCT_ARRAY);
      } else if (typeS.equals("bool[]")) {
         var.setType(Expression.TYPE_BOOL);
         var.setStructure(Expression.STRUCT_ARRAY);
      } else if (typeS.equals("string[]")) {
         var.setType(Expression.TYPE_STRING);
         var.setStructure(Expression.STRUCT_ARRAY);
      }
   }

    private static void closePar2() {
      Expression expr = argStack.pop();
      if (! functionsStack.isEmpty()) {
         argStack = functionsStack.pop();
         argStack.push(expr);
      } else {
         argStack = new Stack();
         argStack.push(expr);
      }
    }

    private static void addArguments(ExprArray array) {
      Stack<Expression> args = paramStack.pop();
      if (args != null) {
         List<Expression> reorderedList = new ArrayList(args.size());
         try {
            while (! args.isEmpty()) {
               reorderedList.add(args.pop());
            }
            int count = reorderedList.size() - 1;
            for (int i = 0; i < reorderedList.size(); i++) {
               array.addExpression(reorderedList.get(count - i));
            }
         } catch (Exception e) {
            System.out.println(e);
         }
      }
    }

    private static void addArguments(AbstractExprFunction function) {
      Stack<Expression> args = paramStack.pop();
      if (args != null) {
         List<Expression> reorderedList = new ArrayList(args.size());
         try {
            while (! args.isEmpty()) {
               reorderedList.add(args.pop());
            }
            int count = reorderedList.size() - 1;
            for (int i = 0; i < reorderedList.size(); i++) {
               function.addExpression(reorderedList.get(count - i));
            }
         } catch (Exception e) {
            System.out.println(e);
         }
      }
    }

  static final public void parse() throws ParseException {
    label_1:
    while (true) {
      block();
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void block() throws ParseException {
    if (jj_2_17(2)) {
      if (jj_2_3(2)) {
        increment();
      } else if (jj_2_4(2)) {
        decrement();
      } else if (jj_2_5(2)) {
        affect();
      } else if (jj_2_6(2)) {
        arrayAffect();
      } else if (jj_2_7(2)) {
        addAssign();
      } else if (jj_2_8(2)) {
        subAssign();
      } else if (jj_2_9(2)) {
        multAssign();
      } else if (jj_2_10(2)) {
        divAssign();
      } else if (jj_2_11(2)) {
        typedAffect();
      } else if (jj_2_12(2)) {
        choice();
      } else if (jj_2_13(2)) {
        whileExpr();
      } else if (jj_2_14(2)) {
        jj_consume_token(COMMENT);
      } else if (jj_2_15(2)) {
        breakExpr();
      } else if (jj_2_16(2)) {
        if (jj_2_2(2)) {
          jj_consume_token(RETURN);
        } else {
          ;
        }
        expr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_18(2)) {
      semicolon();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void breakExpr() throws ParseException {
    Token t;
    jj_consume_token(BREAK);
       ExprBREAK breakExpr = new ExprBREAK();
       push(breakExpr);
  }

  static final public void whileExpr() throws ParseException {
    whileToken();
    openCurly();
    label_2:
    while (true) {
      block();
      if (jj_2_19(2)) {
        ;
      } else {
        break label_2;
      }
    }
    closeCurly();
  }

  static final public void choice() throws ParseException {
    ifToken();
    openCurly();
    label_3:
    while (true) {
      block();
      if (jj_2_20(2)) {
        ;
      } else {
        break label_3;
      }
    }
    closeCurly();
    label_4:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_4;
      }
      elseif();
      openCurly();
      label_5:
      while (true) {
        block();
        if (jj_2_22(2)) {
          ;
        } else {
          break label_5;
        }
      }
      closeCurly();
    }
    if (jj_2_23(2)) {
      elseExpression();
    } else {
      ;
    }
         choices.pop();
  }

  static final public void semicolon() throws ParseException {
    Token t;
    jj_consume_token(SEMICOLON);
      checkSemiColon = true;
  }

  static final public void comma() throws ParseException {
    Token t;
    jj_consume_token(COMMA);
     Expression expr = argStack.pop();
     if (paramStack.isEmpty()) {
        Stack<Expression> args = new Stack();
        paramStack.push(args);
        args.push(expr);
     } else {
        paramStack.peek().push(expr);
     }
     argStack = new Stack();
  }

  static final public void openCurly() throws ParseException {
    Token t;
    jj_consume_token(OPENCURLY);
     CodeBlock block = new CodeBlock();
     if (! blocks.isEmpty()) {
        block.setParentBlock(blocks.peek());
     }
     blocks.push(block);
  }

  static final public void whileToken() throws ParseException {
    Token t;
    t = jj_consume_token(WHILE);
    expr();
       ExprWHILE whileExpr = new ExprWHILE();
       whiles.push(whileExpr);
       Expression condition = argStack.pop();
       whileExpr.setCondition(condition);
       curly.push(TYPE_WHILE);
       push(whileExpr);
  }

  static final public void ifToken() throws ParseException {
    Token t;
    t = jj_consume_token(IF);
    expr();
       ExprCHOICE choice = new ExprCHOICE();
       choices.push(choice);
       Expression condition = argStack.pop();
       choice.addCondition(condition);
       curly.push(TYPE_CHOICE);
       push(choice);
  }

  static final public void elseif() throws ParseException {
    Token t;
    t = jj_consume_token(ELSE);
    jj_consume_token(IF);
    expr();
       Expression condition = argStack.pop();
       curly.push(TYPE_CHOICE);
       choices.peek().addCondition(condition);
  }

  static final public void elseblock() throws ParseException {
    Token t;
    t = jj_consume_token(ELSE);
       curly.push(TYPE_CHOICE);
  }

  static final public void elseExpression() throws ParseException {
    Token t;
    elseblock();
    openCurly();
    label_6:
    while (true) {
      block();
      if (jj_2_24(2)) {
        ;
      } else {
        break label_6;
      }
    }
    closeCurly();
  }

  static final public void closeCurlyArrayDeclaration() throws ParseException {
    Token t;
    jj_consume_token(CLOSECURLY);
     Expression expr = argStack.pop();
     if (paramStack.isEmpty()) {
        Stack<Expression> args = new Stack();
        paramStack.push(args);
        args.push(expr);
     } else {
        paramStack.peek().push(expr);
     }
     argStack = new Stack();
  }

  static final public void closeCurly() throws ParseException {
    Token t;
    jj_consume_token(CLOSECURLY);
      Expression expr = argStack.pop();
      if (curly.peek().equals(TYPE_WHILE)) {
         if (blocks.empty()) {
            whiles.peek().setExpression(expr);
         } else {
            blocks.peek().addExpression(expr);
            whiles.peek().setExpression(blocks.peek());
            blocks.pop();
         }
      } else {
         if (blocks.empty()) {
            choices.peek().addExpression(expr);
         } else {
            blocks.peek().addExpression(expr);
            choices.peek().addExpression(blocks.peek());
            blocks.pop();
         }
      }
      curly.pop();
  }

  static final public void openPar() throws ParseException {
    Token t;
    jj_consume_token(OPENPARENTHESIS);
     checkSemiColon();
     functionsStack.push(argStack);
     argStack = new Stack();
     paramStack.push(new Stack());
  }

  static final public void closePar() throws ParseException {
    Token t;
    jj_consume_token(CLOSEPARENTHESIS);
      Expression expr = argStack.pop();
      paramStack.peek().push(expr);
  }

  static final public void typedAffect() throws ParseException {
    Token t;
    t = jj_consume_token(TYPE);
    affectInType();
        affectType = t.image;
        if (t != null) {
           if (blocks.isEmpty()) {
              CodeBlock block = new CodeBlock();
              blocks.push(block);
           }
           affect.setParentBlock(blocks.peek());
           setVariableType(affectVariable, t.image);
           affect.addLocalVariable(affectVariable);
           affect = null;
        }
  }

  static final public void increment() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(INCREMENT);
         Variable var = getVariable(t.image);
         if (var == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               var = new Variable(t.image);
            }
          }

          ExprIncrement increment = new ExprIncrement();
          increment.setVariable(var);
          push(increment);
  }

  static final public void decrement() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(DECREMENT);
         Variable var = getVariable(t.image);
         if (var == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               var = new Variable(t.image);
            }
          }

          ExprDecrement decrement = new ExprDecrement();
          decrement.setVariable(var);
          push(decrement);
  }

  static final public void affect() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(AFFECTATION);
    expr();
         affectVariable = getVariable(t.image);
         if (affectVariable == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               affectVariable = new Variable(t.image);
            }
          }

          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }
          affect = new ExprAffectation();
          affect.setResult(affectVariable);
          affect.setExpression(e1);

          push(affect);
  }

  static final public void arrayAffect() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(OPENBRACKET);
    expr();
    jj_consume_token(CLOSEBRACKET);
    if (jj_2_25(2)) {
      jj_consume_token(AFFECTATION);
      expr();
    } else {
      ;
    }
          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }

          Expression index = null;
          if (! argStack.empty()) {
             index = argStack.pop();
          }
          if (index == null) {
            Value v = null;
            if (constants.hasConstant(t.image)) {
              v = constants.getConstant(t.image);
            } else {
              v = getVariable(t.image);
            }
            if (v == null) {
               if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
               else {
                 v = new Variable(t.image);
                 equation.getVariables().put(t.image, (Variable)v);
               }
             }
            index = e1;
            ExprArrayIndex arrayIndex = new ExprArrayIndex();
            arrayIndex.setValue(v);
            arrayIndex.setExpression(index);
            push(arrayIndex);
          } else {
             affectVariable = getVariable(t.image);
             if (affectVariable == null) {
                if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
                else {
                  affectVariable = new Variable(t.image);
                }
             }
             ExprArrayAffect affect = new ExprArrayAffect();
             affect.setArray(affectVariable);
             affect.setIndex(index);
             affect.setExpression(e1);
             push(affect);
          }
  }

  static final public void addAssign() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(ADDASSIGNMENT);
    expr();
         affectVariable = getVariable(t.image);
         if (affectVariable == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               affectVariable = new Variable(t.image);
            }
          }

          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }
          ExprAddAssignment affect = new ExprAddAssignment();
          affect.setResult(affectVariable);
          affect.setExpression(e1);
          push(affect);
  }

  static final public void multAssign() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(MULTASSIGNMENT);
    expr();
         affectVariable = getVariable(t.image);
         if (affectVariable == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               affectVariable = new Variable(t.image);
            }
          }

          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }
          ExprMultAssignment affect = new ExprMultAssignment();
          affect.setResult(affectVariable);
          affect.setExpression(e1);
          push(affect);
  }

  static final public void divAssign() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(DIVASSIGNMENT);
    expr();
         affectVariable = getVariable(t.image);
         if (affectVariable == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               affectVariable = new Variable(t.image);
            }
          }

          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }
          ExprDivAssignment affect = new ExprDivAssignment();
          affect.setResult(affectVariable);
          affect.setExpression(e1);
          push(affect);
  }

  static final public void subAssign() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(SUBASSIGNMENT);
    expr();
         affectVariable = getVariable(t.image);
         if (affectVariable == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
               affectVariable = new Variable(t.image);
            }
          }

          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }
          ExprSubAssignment affect = new ExprSubAssignment();
          affect.setResult(affectVariable);
          affect.setExpression(e1);
          push(affect);
  }

  static final public void affectInType() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(AFFECTATION);
    expr();
          affectVariable = new Variable(t.image);
          Expression e1 = null;
          if (! argStack.empty()) {
             e1 = argStack.pop();
          }
          affect = new ExprAffectation();
          if (! blocks.empty()) {
             blocks.peek().addExpression(affect);
          }
          affect.setResult(affectVariable);
          affect.setExpression(e1);
          push(affect);
  }

  static final public void arrayDeclaration() throws ParseException {
    Token t;
    jj_consume_token(OPENCURLY);
    FormalParameters();
    closeCurlyArrayDeclaration();
        int size = 0;
        if (! paramStack.isEmpty()) {
           size = paramStack.peek().size();
        }
            ExprArray exprArray = new ExprArray();
            addArguments(exprArray);
            push(exprArray);
  }

  static final public void expr() throws ParseException {
    Token t;
    if (jj_2_26(2)) {
      unary();
    } else if (jj_2_27(2)) {
      arrayDeclaration();
    } else if (jj_2_28(2)) {
      exprWithoutFirst();
    } else if (jj_2_29(2)) {
      exprWithFirst();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      if (jj_2_30(2)) {
        ;
      } else {
        break label_7;
      }
      if (jj_2_31(2)) {
        exprManyMULTDIVIDE();
      } else if (jj_2_32(2)) {
        exprContinuation();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void exprWithoutFirst() throws ParseException {
    Token t;
    if (jj_2_33(2)) {
      t = jj_consume_token(ADD);
    } else if (jj_2_34(2)) {
      t = jj_consume_token(SUB);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    unary();
            Expression e1 = null;
            if (! argStack.empty()) {
                e1 = argStack.pop();
            }
            AryExpression e = null;
            if (t.kind == ADD) e = new ExprADD();
            else if (t.kind == SUB) e = new ExprSUB();
            e.setExpression1(e1);
            push(e);
  }

  static final public void exprWithFirst() throws ParseException {
    Token t;
    unary();
    if (jj_2_35(2)) {
      t = jj_consume_token(AND);
    } else if (jj_2_36(2)) {
      t = jj_consume_token(OR);
    } else if (jj_2_37(2)) {
      t = jj_consume_token(XOR);
    } else if (jj_2_38(2)) {
      t = jj_consume_token(ADD);
    } else if (jj_2_39(2)) {
      t = jj_consume_token(SUB);
    } else if (jj_2_40(2)) {
      t = jj_consume_token(MULT);
    } else if (jj_2_41(2)) {
      t = jj_consume_token(DIV);
    } else if (jj_2_42(2)) {
      t = jj_consume_token(MOD);
    } else if (jj_2_43(2)) {
      t = jj_consume_token(EQ);
    } else if (jj_2_44(2)) {
      t = jj_consume_token(NEQ);
    } else if (jj_2_45(2)) {
      t = jj_consume_token(LT);
    } else if (jj_2_46(2)) {
      t = jj_consume_token(LE);
    } else if (jj_2_47(2)) {
      t = jj_consume_token(GT);
    } else if (jj_2_48(2)) {
      t = jj_consume_token(GE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_49(2)) {
      exprManyMULTDIVIDE();
    } else if (jj_2_50(2)) {
      unary();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
            Expression e1 = argStack.pop();
            Expression e2 = null;
            if (! ((t.kind == ADD) || (t.kind == SUB))) {
                if (argStack.empty()) {
                    {if (true) throw new ParseException(t.image + " unbalanced expression");}
                }
            }
            if (! argStack.empty()) {
                e2 = argStack.pop();
            }
            AryExpression e = null;
            if (t.kind == AND) e = new ExprAND();
            else if (t.kind == OR) e = new ExprOR();
            else if (t.kind == XOR) e = new ExprXOR();
            else if (t.kind == ADD) e = new ExprADD();
            else if (t.kind == SUB) e = new ExprSUB();
            else if (t.kind == MULT) e = new ExprMULT();
            else if (t.kind == DIV) e = new ExprDIV();
            else if (t.kind == EQ) e = new ExprEQ();
            else if (t.kind == NEQ) e = new ExprNEQ();
            else if (t.kind == LT) e = new ExprLT();
            else if (t.kind == LE) e = new ExprLE();
            else if (t.kind == GT) e = new ExprGT();
            else if (t.kind == GE) e = new ExprGE();
            else if (t.kind == MOD) e = new ExprMOD();
            e.setExpression1(e1);
            e.setExpression2(e2);
            push(e);
  }

  static final public void exprManyMULTDIVIDE() throws ParseException {
    Token t;
    exprMULTDIVIDEContinuation();
    label_8:
    while (true) {
      if (jj_2_51(2)) {
        ;
      } else {
        break label_8;
      }
      exprMULTDIVIDE();
    }

  }

  static final public void exprMULTDIVIDEContinuation() throws ParseException {
    Token t;
    if (jj_2_52(2)) {
      t = jj_consume_token(MULT);
    } else if (jj_2_53(2)) {
      t = jj_consume_token(DIV);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    unary();
            Expression e1 = argStack.pop();
            Expression e2 = null;
            if (! ((t.kind == MULT) || (t.kind == DIV))) {
                if (argStack.empty()) {
                    {if (true) throw new ParseException(t.image + " unbalanced expression");}
                }
            }
            if (! argStack.empty()) {
                e2 = argStack.pop();
            }
            AryExpression e = null;
            if (t.kind == MULT) e = new ExprMULT();
            else if (t.kind == DIV) e = new ExprDIV();
            e.setExpression1(e1);
            e.setExpression2(e2);
            push(e);
  }

  static final public void exprMULTDIVIDE() throws ParseException {
    Token t;
    if (jj_2_54(2)) {
      unary();
    } else {
      ;
    }
    if (jj_2_55(2)) {
      t = jj_consume_token(MULT);
    } else if (jj_2_56(2)) {
      t = jj_consume_token(DIV);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    unary();
            Expression e1 = argStack.pop();
            Expression e2 = null;
            if (! ((t.kind == MULT) || (t.kind == DIV))) {
                if (argStack.empty()) {
                    {if (true) throw new ParseException(t.image + " unbalanced expression");}
                }
            }
            if (! argStack.empty()) {
                e2 = argStack.pop();
            }
            AryExpression e = null;
            if (t.kind == MULT) e = new ExprMULT();
            else if (t.kind == DIV) e = new ExprDIV();
            e.setExpression1(e1);
            e.setExpression2(e2);
            push(e);
  }

  static final public void exprContinuation() throws ParseException {
    Token t;
    if (jj_2_57(2)) {
      unary();
    } else {
      ;
    }
    if (jj_2_58(2)) {
      t = jj_consume_token(AND);
    } else if (jj_2_59(2)) {
      t = jj_consume_token(OR);
    } else if (jj_2_60(2)) {
      t = jj_consume_token(XOR);
    } else if (jj_2_61(2)) {
      t = jj_consume_token(ADD);
    } else if (jj_2_62(2)) {
      t = jj_consume_token(SUB);
    } else if (jj_2_63(2)) {
      t = jj_consume_token(MOD);
    } else if (jj_2_64(2)) {
      t = jj_consume_token(EQ);
    } else if (jj_2_65(2)) {
      t = jj_consume_token(NEQ);
    } else if (jj_2_66(2)) {
      t = jj_consume_token(LT);
    } else if (jj_2_67(2)) {
      t = jj_consume_token(LE);
    } else if (jj_2_68(2)) {
      t = jj_consume_token(GT);
    } else if (jj_2_69(2)) {
      t = jj_consume_token(GE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    unary();
            Expression e1 = argStack.pop();
            Expression e2 = null;
            if (! ((t.kind == ADD) || (t.kind == SUB))) {
                if (argStack.empty()) {
                    {if (true) throw new ParseException(t.image + " unbalanced expression");}
                }
            }
            if (! argStack.empty()) {
                e2 = argStack.pop();
            }
            AryExpression e = null;
            if (t.kind == AND) e = new ExprAND();
            else if (t.kind == OR) e = new ExprOR();
            else if (t.kind == XOR) e = new ExprXOR();
            else if (t.kind == ADD) e = new ExprADD();
            else if (t.kind == SUB) e = new ExprSUB();
            else if (t.kind == EQ) e = new ExprEQ();
            else if (t.kind == NEQ) e = new ExprNEQ();
            else if (t.kind == LT) e = new ExprLT();
            else if (t.kind == LE) e = new ExprLE();
            else if (t.kind == GT) e = new ExprGT();
            else if (t.kind == GE) e = new ExprGE();
            else if (t.kind == MOD) e = new ExprMOD();
            e.setExpression1(e1);
            e.setExpression2(e2);
            push(e);
  }

  static final public void unary() throws ParseException {
    Token t;
    if (jj_2_85(2)) {
      if (jj_2_70(2)) {
        t = jj_consume_token(NOT);
      } else if (jj_2_71(2)) {
        t = jj_consume_token(SIN);
      } else if (jj_2_72(2)) {
        t = jj_consume_token(COS);
      } else if (jj_2_73(2)) {
        t = jj_consume_token(TAN);
      } else if (jj_2_74(2)) {
        t = jj_consume_token(ACOS);
      } else if (jj_2_75(2)) {
        t = jj_consume_token(ASIN);
      } else if (jj_2_76(2)) {
        t = jj_consume_token(ATAN);
      } else if (jj_2_77(2)) {
        t = jj_consume_token(ABS);
      } else if (jj_2_78(2)) {
        t = jj_consume_token(SQRT);
      } else if (jj_2_79(2)) {
        t = jj_consume_token(CEIL);
      } else if (jj_2_80(2)) {
        t = jj_consume_token(FLOOR);
      } else if (jj_2_81(2)) {
        t = jj_consume_token(TODEGREES);
      } else if (jj_2_82(2)) {
        t = jj_consume_token(TORADIANS);
      } else if (jj_2_83(2)) {
        t = jj_consume_token(SIGN);
      } else if (jj_2_84(2)) {
        t = jj_consume_token(ECHO);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      element();
        UnaryExpression e = null;
        Expression e1 = argStack.pop();
        if (t.kind == NOT) e = new ExprNOT();
        else if (t.kind == SIN) e = new ExprSIN();
        else if (t.kind == COS) e = new ExprCOS();
        else if (t.kind == TAN) e = new ExprTAN();
        else if (t.kind == ASIN) e = new ExprASIN();
        else if (t.kind == ACOS) e = new ExprACOS();
        else if (t.kind == ATAN) e = new ExprATAN();
        else if (t.kind == SQRT) e = new ExprSQRT();
        else if (t.kind == CEIL) e = new ExprCEIL();
        else if (t.kind == FLOOR) e = new ExprFLOOR();
        else if (t.kind == ABS) e = new ExprABS();
        else if (t.kind == SIGN) e = new ExprSIGN();
        else if (t.kind == ECHO) e = new ExprECHO();
        else if (t.kind == TODEGREES) e = new ExprToDegrees();
        else if (t.kind == TORADIANS) e = new ExprToRadians();
        e.setExpression(e1);
        push(e);
    } else if (jj_2_86(2)) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(OPENBRACKET);
      expr();
      jj_consume_token(CLOSEBRACKET);
        ExprArrayIndex e = new ExprArrayIndex();
        Value v = null;
        if (constants.hasConstant(t.image)) {
            v = constants.getConstant(t.image);
        } else {
            v = getVariable(t.image);
        }
        if (v == null) {
            if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
            else {
                v = new Variable(t.image);
                equation.getVariables().put(t.image, (Variable)v);
            }
        }
        e.setValue(v);
        Expression e1 = argStack.pop();
        e.setExpression(e1);
        push(e);
    } else if (jj_2_87(2)) {
      t = jj_consume_token(IDENTIFIER);
      openPar();
      FormalParameters();
      closePar();
        int size = 0;
        if (! paramStack.isEmpty()) {
           size = paramStack.peek().size();
        }
        if ((t.image.equals("format")) && (size == 2)) {
            ExprFORMAT exprFormat = new ExprFORMAT();
            addArguments(exprFormat);
            push(exprFormat);
        } else if ((t.image.equals("atn2")) && (size == 2)) {
            ExprATAN2 exprAtan2 = new ExprATAN2();
            addArguments(exprAtan2);
            push(exprAtan2);
        } else if ((t.image.equals("pow")) && (size == 2)) {
            ExprPOW exprPow = new ExprPOW();
            addArguments(exprPow);
            push(exprPow);
        } else {
            exprFunction = new ExprFunction(t.image, size);
            addArguments(exprFunction);
            push(exprFunction);
        }
        closePar2();
    } else if (jj_2_88(2)) {
      element();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FormalParameters() throws ParseException {
    Token t;
    if (jj_2_90(2)) {
      label_9:
      while (true) {
        block();
        if (jj_2_89(2)) {
          ;
        } else {
          break label_9;
        }
      }
    } else if (jj_2_91(2)) {
      expr();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_10:
    while (true) {
      if (jj_2_92(2)) {
        ;
      } else {
        break label_10;
      }
      comma();
      if (jj_2_94(2)) {
        label_11:
        while (true) {
          block();
          if (jj_2_93(2)) {
            ;
          } else {
            break label_11;
          }
        }
      } else if (jj_2_95(2)) {
        expr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void element() throws ParseException {
    Token t;
    if (jj_2_100(2)) {
      if (jj_2_96(2)) {
        t = jj_consume_token(IDENTIFIER);
      } else if (jj_2_97(2)) {
        t = jj_consume_token(DOLLAR_VAR);
      } else if (jj_2_98(2)) {
        t = jj_consume_token(VALUE);
      } else if (jj_2_99(2)) {
        t = jj_consume_token(TEXT);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        Expression e = null;
        if ((! t.image.equals("return")) && (t.kind == IDENTIFIER)) {
            if (t.image.equals("PI")) {
                e = equation.createPIConstant(Math.PI);
            } else if (t.image.equals("true")) {
                e = equation.createBooleanConstant(true);
            } else if (t.image.equals("false")) {
                e = equation.createBooleanConstant(false);
            } else if (constants.hasConstant(t.image)) {
                e = constants.getConstant(t.image);
            } else {
                e = getVariable(t.image);
                if (e == null) {
                    if (!acceptUndefVars) {if (true) throw new ParseException(t.image + " variable undefined");}
                    else {
                        e = new Variable(t.image);
                        equation.getVariables().put(t.image, (Variable)e);
                    }
                }
            }
        } else if (t.kind == DOLLAR_VAR) {
            e = equation.getDollarVariable(t.image);
            if ((e == null) && (!acceptUndefVars)) {if (true) throw new ParseException(t.image + " variable undefined");}
        } else if (t.kind != RETURN) {
            e = equation.createConstant(t.image);
        }
        if (e != null) {
           push(e);
        }
    } else if (jj_2_101(2)) {
      jj_consume_token(OPENPARENTHESIS);
      expr();
      jj_consume_token(CLOSEPARENTHESIS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  static private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  static private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  static private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  static private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  static private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  static private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  static private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  static private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  static private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  static private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  static private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  static private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  static private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  static private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  static private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  static private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  static private boolean jj_3_93() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3_94() {
    Token xsp;
    if (jj_3_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  static private boolean jj_3_97() {
    if (jj_scan_token(DOLLAR_VAR)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(MULTASSIGNMENT)) return true;
    return false;
  }

  static private boolean jj_3_92() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3_91() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_scan_token(FLOOR)) return true;
    return false;
  }

  static private boolean jj_3_96() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_scan_token(CEIL)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(AFFECTATION)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_89() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_90() {
    Token xsp;
    if (jj_3_89()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ADDASSIGNMENT)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_88() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_scan_token(SQRT)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_scan_token(ATAN)) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_87() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_scan_token(ASIN)) return true;
    return false;
  }

  static private boolean jj_3_84() {
    if (jj_scan_token(ECHO)) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_scan_token(ACOS)) return true;
    return false;
  }

  static private boolean jj_3_83() {
    if (jj_scan_token(SIGN)) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(TAN)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_86() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_scan_token(COS)) return true;
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_scan_token(TORADIANS)) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(SIN)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_81() {
    if (jj_scan_token(TODEGREES)) return true;
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) {
    jj_scanpos = xsp;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(AFFECTATION)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DECREMENT)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(OPENCURLY)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SUBASSIGNMENT)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(COMMENT)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(INCREMENT)) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_99() {
    if (jj_scan_token(TEXT)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DIVASSIGNMENT)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_95() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_98() {
    if (jj_scan_token(VALUE)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_101() {
    if (jj_scan_token(OPENPARENTHESIS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EquationParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[101];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EquationParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EquationParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EquationParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EquationParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EquationParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EquationParser(EquationParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EquationParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 101; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
