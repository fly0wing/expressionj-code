/* Generated By:JavaCC: Do not edit this line. EquationParserConstants.java */
package org.da.expressionj.expr.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface EquationParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int AND = 5;
  /** RegularExpression Id. */
  int OR = 6;
  /** RegularExpression Id. */
  int XOR = 7;
  /** RegularExpression Id. */
  int NOT = 8;
  /** RegularExpression Id. */
  int GT = 9;
  /** RegularExpression Id. */
  int LT = 10;
  /** RegularExpression Id. */
  int GE = 11;
  /** RegularExpression Id. */
  int LE = 12;
  /** RegularExpression Id. */
  int EQ = 13;
  /** RegularExpression Id. */
  int NEQ = 14;
  /** RegularExpression Id. */
  int INCREMENT = 15;
  /** RegularExpression Id. */
  int DECREMENT = 16;
  /** RegularExpression Id. */
  int AFFECTATION = 17;
  /** RegularExpression Id. */
  int ADDASSIGNMENT = 18;
  /** RegularExpression Id. */
  int SUBASSIGNMENT = 19;
  /** RegularExpression Id. */
  int MULTASSIGNMENT = 20;
  /** RegularExpression Id. */
  int DIVASSIGNMENT = 21;
  /** RegularExpression Id. */
  int ADD = 22;
  /** RegularExpression Id. */
  int SUB = 23;
  /** RegularExpression Id. */
  int DIV = 24;
  /** RegularExpression Id. */
  int MOD = 25;
  /** RegularExpression Id. */
  int MULT = 26;
  /** RegularExpression Id. */
  int SIN = 27;
  /** RegularExpression Id. */
  int COS = 28;
  /** RegularExpression Id. */
  int TAN = 29;
  /** RegularExpression Id. */
  int ABS = 30;
  /** RegularExpression Id. */
  int ASIN = 31;
  /** RegularExpression Id. */
  int ACOS = 32;
  /** RegularExpression Id. */
  int ATAN = 33;
  /** RegularExpression Id. */
  int SQRT = 34;
  /** RegularExpression Id. */
  int FLOOR = 35;
  /** RegularExpression Id. */
  int CEIL = 36;
  /** RegularExpression Id. */
  int SIGN = 37;
  /** RegularExpression Id. */
  int ECHO = 38;
  /** RegularExpression Id. */
  int TODEGREES = 39;
  /** RegularExpression Id. */
  int TORADIANS = 40;
  /** RegularExpression Id. */
  int DIGITS = 41;
  /** RegularExpression Id. */
  int CHARACTERS = 42;
  /** RegularExpression Id. */
  int TYPE = 43;
  /** RegularExpression Id. */
  int RETURN = 44;
  /** RegularExpression Id. */
  int BREAK = 45;
  /** RegularExpression Id. */
  int FIELD = 46;
  /** RegularExpression Id. */
  int IF = 47;
  /** RegularExpression Id. */
  int ELSE = 48;
  /** RegularExpression Id. */
  int WHILE = 49;
  /** RegularExpression Id. */
  int IDENTIFIER = 50;
  /** RegularExpression Id. */
  int DOLLAR_VAR = 51;
  /** RegularExpression Id. */
  int VALUE = 52;
  /** RegularExpression Id. */
  int TEXT = 53;
  /** RegularExpression Id. */
  int OPENCURLY = 54;
  /** RegularExpression Id. */
  int SEMICOLON = 55;
  /** RegularExpression Id. */
  int COMMA = 56;
  /** RegularExpression Id. */
  int OPENPARENTHESIS = 57;
  /** RegularExpression Id. */
  int CLOSEPARENTHESIS = 58;
  /** RegularExpression Id. */
  int OPENBRACKET = 59;
  /** RegularExpression Id. */
  int CLOSEBRACKET = 60;
  /** RegularExpression Id. */
  int CLOSECURLY = 61;
  /** RegularExpression Id. */
  int COMMENT = 62;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"&&\"",
    "\"||\"",
    "\"^\"",
    "\"!\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"++\"",
    "\"--\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"%\"",
    "\"*\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"abs\"",
    "\"asin\"",
    "\"acos\"",
    "\"atan\"",
    "\"sqrt\"",
    "\"floor\"",
    "\"ceil\"",
    "\"sign\"",
    "\"echo\"",
    "\"toDegrees\"",
    "\"toRadians\"",
    "<DIGITS>",
    "<CHARACTERS>",
    "<TYPE>",
    "\"return\"",
    "\"break\"",
    "\"->\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "<IDENTIFIER>",
    "<DOLLAR_VAR>",
    "<VALUE>",
    "<TEXT>",
    "\"{\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"}\"",
    "<COMMENT>",
  };

}
